// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	apperrors "github.com/adal4ik/crypto-service/pkg/apperrors"

	decimal "github.com/shopspring/decimal"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// PriceRepositoryInterface is an autogenerated mock type for the PriceRepositoryInterface type
type PriceRepositoryInterface struct {
	mock.Mock
}

// Add provides a mock function with given fields: ctx, symbol, price, timestamp
func (_m *PriceRepositoryInterface) Add(ctx context.Context, symbol string, price decimal.Decimal, timestamp time.Time) *apperrors.AppError {
	ret := _m.Called(ctx, symbol, price, timestamp)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 *apperrors.AppError
	if rf, ok := ret.Get(0).(func(context.Context, string, decimal.Decimal, time.Time) *apperrors.AppError); ok {
		r0 = rf(ctx, symbol, price, timestamp)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apperrors.AppError)
		}
	}

	return r0
}

// GetNearest provides a mock function with given fields: ctx, symbol, timestamp
func (_m *PriceRepositoryInterface) GetNearest(ctx context.Context, symbol string, timestamp time.Time) (decimal.Decimal, time.Time, *apperrors.AppError) {
	ret := _m.Called(ctx, symbol, timestamp)

	if len(ret) == 0 {
		panic("no return value specified for GetNearest")
	}

	var r0 decimal.Decimal
	var r1 time.Time
	var r2 *apperrors.AppError
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Time) (decimal.Decimal, time.Time, *apperrors.AppError)); ok {
		return rf(ctx, symbol, timestamp)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Time) decimal.Decimal); ok {
		r0 = rf(ctx, symbol, timestamp)
	} else {
		r0 = ret.Get(0).(decimal.Decimal)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, time.Time) time.Time); ok {
		r1 = rf(ctx, symbol, timestamp)
	} else {
		r1 = ret.Get(1).(time.Time)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, time.Time) *apperrors.AppError); ok {
		r2 = rf(ctx, symbol, timestamp)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).(*apperrors.AppError)
		}
	}

	return r0, r1, r2
}

// NewPriceRepositoryInterface creates a new instance of PriceRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPriceRepositoryInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *PriceRepositoryInterface {
	mock := &PriceRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
