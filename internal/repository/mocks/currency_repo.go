// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	apperrors "github.com/adal4ik/crypto-service/pkg/apperrors"

	mock "github.com/stretchr/testify/mock"
)

// CurrencyRepositoryInterface is an autogenerated mock type for the CurrencyRepositoryInterface type
type CurrencyRepositoryInterface struct {
	mock.Mock
}

// Add provides a mock function with given fields: ctx, symbol
func (_m *CurrencyRepositoryInterface) Add(ctx context.Context, symbol string) *apperrors.AppError {
	ret := _m.Called(ctx, symbol)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 *apperrors.AppError
	if rf, ok := ret.Get(0).(func(context.Context, string) *apperrors.AppError); ok {
		r0 = rf(ctx, symbol)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apperrors.AppError)
		}
	}

	return r0
}

// GetAll provides a mock function with given fields: ctx
func (_m *CurrencyRepositoryInterface) GetAll(ctx context.Context) ([]string, *apperrors.AppError) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []string
	var r1 *apperrors.AppError
	if rf, ok := ret.Get(0).(func(context.Context) ([]string, *apperrors.AppError)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []string); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) *apperrors.AppError); ok {
		r1 = rf(ctx)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*apperrors.AppError)
		}
	}

	return r0, r1
}

// Remove provides a mock function with given fields: ctx, symbol
func (_m *CurrencyRepositoryInterface) Remove(ctx context.Context, symbol string) *apperrors.AppError {
	ret := _m.Called(ctx, symbol)

	if len(ret) == 0 {
		panic("no return value specified for Remove")
	}

	var r0 *apperrors.AppError
	if rf, ok := ret.Get(0).(func(context.Context, string) *apperrors.AppError); ok {
		r0 = rf(ctx, symbol)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apperrors.AppError)
		}
	}

	return r0
}

// NewCurrencyRepositoryInterface creates a new instance of CurrencyRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCurrencyRepositoryInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *CurrencyRepositoryInterface {
	mock := &CurrencyRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
